---
import { languages } from '../i18n/ui';
import { getLangFromUrl, getLocalizedPath, removeLocaleFromPath } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const currentPath = removeLocaleFromPath(Astro.url.pathname);
---

<div class="relative">
  <button class="flex items-center space-x-2 px-3 py-2 text-sm text-slate-700 hover:text-slate-900 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded" id="language-toggle" type="button" aria-haspopup="true" aria-expanded="false">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
    </svg>
    <span>{languages[lang]}</span>
    <svg class="w-4 h-4 transition-transform duration-200" id="dropdown-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 9-7 7-7-7"></path>
    </svg>
  </button>
  
  <div class="absolute right-0 mt-2 w-20 bg-white rounded-lg shadow-lg border border-slate-200 opacity-0 invisible scale-95 transition-all duration-200 z-50" id="language-menu" role="menu" aria-labelledby="language-toggle">
    {Object.entries(languages).map(([langCode, langName]) => (
      <a 
        href={getLocalizedPath(currentPath, langCode)}
        class={`block px-3 py-2 text-sm hover:bg-slate-50 transition-colors first:rounded-t-lg last:rounded-b-lg text-center focus:outline-none focus:bg-slate-50 ${
          lang === langCode ? 'bg-blue-50 text-blue-600 font-medium' : 'text-slate-700'
        }`}
        role="menuitem"
      >
        {langName}
      </a>
    ))}
  </div>
</div>

<script>
  function initLanguageSwitcher() {
    const toggle = document.getElementById('language-toggle') as HTMLButtonElement;
    const menu = document.getElementById('language-menu') as HTMLElement;
    const arrow = document.getElementById('dropdown-arrow') as HTMLElement;
    
    if (!toggle || !menu || !arrow) return;
    
    let isOpen = false;
    
    function openMenu() {
      isOpen = true;
      menu.classList.remove('opacity-0', 'invisible', 'scale-95');
      menu.classList.add('opacity-100', 'visible', 'scale-100');
      arrow.style.transform = 'rotate(180deg)';
      toggle.setAttribute('aria-expanded', 'true');
    }
    
    function closeMenu() {
      isOpen = false;
      menu.classList.remove('opacity-100', 'visible', 'scale-100');
      menu.classList.add('opacity-0', 'invisible', 'scale-95');
      arrow.style.transform = 'rotate(0deg)';
      toggle.setAttribute('aria-expanded', 'false');
    }
    
    // Toggle menu on button click
    toggle.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (isOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    });
    
    // Handle touch events for better mobile support
    toggle.addEventListener('touchstart', (e) => {
      e.preventDefault();
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (isOpen && !toggle.contains(e.target as Node) && !menu.contains(e.target as Node)) {
        closeMenu();
      }
    });
    
    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (isOpen && e.key === 'Escape') {
        closeMenu();
        toggle.focus();
      }
    });
    
    // Handle menu item keyboard navigation
    menu.addEventListener('keydown', (e) => {
      const menuItems = menu.querySelectorAll('a[role="menuitem"]') as NodeListOf<HTMLElement>;
      const currentIndex = Array.from(menuItems).indexOf(document.activeElement as HTMLElement);
      
      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          const nextIndex = currentIndex < menuItems.length - 1 ? currentIndex + 1 : 0;
          menuItems[nextIndex].focus();
          break;
        case 'ArrowUp':
          e.preventDefault();
          const prevIndex = currentIndex > 0 ? currentIndex - 1 : menuItems.length - 1;
          menuItems[prevIndex].focus();
          break;
        case 'Enter':
        case ' ':
          e.preventDefault();
          (document.activeElement as HTMLElement).click();
          break;
      }
    });
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageSwitcher);
  } else {
    initLanguageSwitcher();
  }
  
  // Reinitialize on navigation (for SPAs)
  document.addEventListener('astro:page-load', initLanguageSwitcher);
</script>